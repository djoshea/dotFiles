
NONE="\[\033[0m\]"    # unsets color to term's fg color

# regular colors
K="\[\033[0;30m\]"    # black
R="\[\033[0;31m\]"    # red
G="\[\033[0;32m\]"    # green
Y="\[\033[0;33m\]"    # yellow
B="\[\033[0;34m\]"    # blue
M="\[\033[0;35m\]"    # magenta
C="\[\033[0;36m\]"    # cyan
W="\[\033[0;37m\]"    # white

# emphasized (bolded) colors
EMK="\[\033[1;30m\]"
EMR="\[\033[1;31m\]"
EMG="\[\033[1;32m\]"
EMY="\[\033[1;33m\]"
EMB="\[\033[1;34m\]"
EMM="\[\033[1;35m\]"
EMC="\[\033[1;36m\]"
EMW="\[\033[1;37m\]"

# background colors
BGK="\[\033[40m\]"
BGR="\[\033[41m\]"
BGG="\[\033[42m\]"
BGY="\[\033[43m\]"
BGB="\[\033[44m\]"
BGM="\[\033[45m\]"
BGC="\[\033[46m\]"
BGW="\[\033[47m\]"

# function for setting terminal title
function title {
    echo -en "\033]2;$1\007"
}

# functions for including git branch in prompt
function git-branch-name {
    echo $(git symbolic-ref HEAD 2>/dev/null | awk -F/ {'print $NF'})
}

function git-branch-name-colored
{
    local EMY="\\033[1;33m"
    local NONE="\033[0m"    # unsets color to term's fg color
    echo -en "${EMY}$(git-branch-name)${NONE}"
}

function git-dirty {
    local EMR="\033[1;31m"
    local NONE="\033[0m"    # unsets color to term's fg color

    st=$(git status 2>/dev/null | tail -n 1)
    if [[ $st != "nothing to commit (working directory clean)" ]]
    then
        echo -en "${EMR}*${NONE}"
    fi
}
function git-unpushed {
    local C="\033[0;36m"    # cyan
    local NONE="\033[0m"    # unsets color to term's fg color
    local branch=$(git-branch-name)
    local brinfo=$(git branch -v | grep $branch)
    if [[ $brinfo =~ ("[ahead "([[:digit:]]*)]) ]]
    then 
        echo -en "${C}(${BASH_REMATCH[2]})${NONE}"
    fi
}
function gitify {
    status=$(git status 2>/dev/null | tail -n 1)
    if [[ $status == "" ]]
    then
        echo ""
    else
        echo -n " "
        git-branch-name-colored
        git-dirty
        git-unpushed
        #echo " $(git-branch-name)$(git-dirty)$(git-unpushed)"
    fi
}

##################################################
# The home directory (HOME) is replaced with a ~
# The last pwdmaxlen characters of the PWD are displayed
# Leading partial directory names are striped off
# /home/me/stuff          -> ~/stuff               if USER=me
# /usr/share/big_dir_name -> ../share/big_dir_name if pwdmaxlen=20
##################################################
bash_prompt_command() {
# How many characters of the $PWD should be kept
    local pwdmaxlen=30
# Indicate that there has been dir truncation
        local trunc_symbol=".."
        local dir=${PWD##*/}
    pwdmaxlen=$(( ( pwdmaxlen < ${#dir} ) ? ${#dir} : pwdmaxlen ))
        NEW_PWD=${PWD/#$HOME/\~}
    local pwdoffset=$(( ${#NEW_PWD} - pwdmaxlen ))
        if [ ${pwdoffset} -gt "0" ]
            then
                NEW_PWD=${NEW_PWD:$pwdoffset:$pwdmaxlen}
    NEW_PWD=${trunc_symbol}/${NEW_PWD#*/}
    fi

    # set title to current directory
    echo -ne "\033]0;${NEW_PWD}\007" 
}

bash_prompt() {
#    case $TERM in
#     xterm*|rxvt*)
#         local TITLEBAR='[\033]0;${NEW_PWD}\007\]'
#          ;;
#     *)
#         local TITLEBAR=""
#          ;;
#    esac

        local UC=$W                 # user's color
        [ $UID -eq "0" ] && UC=$R   # root's color

        PS1="\n${EMK}[ ${UC}\u${EMK}@${UC}\h ${EMB}\${NEW_PWD}\$(gitify)${EMK}]${UC}: ${NONE}"
# without colors: 
# PS1="[\u@\h \${NEW_PWD}]\\$ "
# extra backslash in front of \$ to make bash colorize the prompt
}

PROMPT_COMMAND=bash_prompt_command
bash_prompt
unset bash_prompt
